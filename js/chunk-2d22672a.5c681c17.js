(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22672a"],{e966:function(s,r,t){"use strict";t.r(r);var e=function(){var s=this,r=s.$createElement;s._self._c;return s._m(0)},a=[function(){var s=this,r=s.$createElement,t=s._self._c||r;return t("section",[t("p",[s._v("Generator 生成器用于生成迭代器(Iterator)，根据MDN的定义，生成器是可以中途退出，之后再继续的函数，而其上下文，如绑定的变量会被保留。\n一般情况下，任何函数只要一执行，就会执行到return或函数结束，或抛出错误，无法中断，先进行其他操作再重回继续，而生成器提供了这样的可能。")]),t("p",[s._v("语法：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" *("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{ "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// anonymous generator function")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//... other codes")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" somethingYouWantToPassToOtherFunctions;\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" optionalValue; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// this will end the generator, making it return {done:true}")]),s._v("\n}\n")])]),t("p",[t("em",[s._v("yield")]),s._v("类似return，其返回的是一个迭代器，迭代器的"),t("strong",[s._v("定义")]),s._v("是一个实现了一个next方法的对象，方法里返回一个对象，"),t("strong",[s._v("至少")]),s._v("有done和value两个属性，而这些是"),t("em",[s._v("迭代器协议")]),s._v("规定的，它定义了一种标准的方式来产生一组有限或无限序列的值。当调用生成器函数时，立即返回的是一个"),t("strong",[s._v("迭代器")]),s._v("对象(an iterator object)，当调用该iterator的next方法时，生成器函数会执行到第一个yield处停止，返回了一个含有value和done两个属性对象，通过value获取其yield之后的值。")]),t("p",[s._v("生成器的"),t("strong",[s._v("重要应用")]),s._v("之一是"),t("em",[s._v("async/await与promise")]),s._v("的结合，如果说promise缓解了异步编程中回调地狱的问题，那么生成器可解决它。")]),t("h2",[s._v("可迭代协议(Iterator protocol) - 使对象可迭代")]),t("p",[s._v("要使一个普通对象A可迭代，该对象称为iterable object。\n它必须实现"),t("code",{pre:!0},[s._v("@@iterator")]),s._v("的方法，通过设置"),t("code",{pre:!0},[s._v("[Symbol.iterator]")]),s._v("函数属性来实现。该"),t("strong",[s._v("函数")]),s._v("属性应该遵循"),t("em",[s._v("迭代器协议")]),s._v("规范，即是返回一个包含next方法的对象，next方法再返回有done和value两个属性的对象。因此，设置"),t("code",{pre:!0},[s._v("[Symbol.iterator]")]),s._v("函数属性有2种方法：")]),t("ol",[t("li",[s._v("手动返回迭代器")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("obj["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{ "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// zero-argument")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// can access the obj's properties via this")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n    next(){\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a<"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v("){ "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// this here refers to the scope of the returned iterator object")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a++,"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("}\n      }\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("}\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n  }\n}\n")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("设置"),t("code",{pre:!0},[s._v("[Symbol.iterator]")]),s._v("为一个生成器，自动返回迭代器")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("obj["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" *("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v("(a<"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v("){\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" a++;\n  }\n}\n")])]),t("p",[s._v("当这个对象A需要被迭代时，如用在for...of...loop中，"),t("code",{pre:!0},[s._v("@@iterator")]),s._v("方法会被调用，方法里的this指向对象A")]),t("h3",[s._v("生成器对象既是可迭代对象，也是迭代器")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" iterableAndIterator = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" *("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n}();\n")])]),t("p",[s._v("因为iterableAndIterator既有"),t("code",{pre:!0},[s._v("@@iterator")]),s._v("方法(该方法返回的是自身)，也有"),t("code",{pre:!0},[s._v("next")]),s._v("方法")])])}],n=t("2877"),l={},v=Object(n["a"])(l,e,a,!1,null,null,null);r["default"]=v.exports}}]);
//# sourceMappingURL=chunk-2d22672a.5c681c17.js.map