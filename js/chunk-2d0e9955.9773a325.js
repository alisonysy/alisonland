(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e9955"],{"8dc6":function(e,s,n){"use strict";n.r(s);var t=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},r=[function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("section",[n("p",[e._v("ES6提出了let和constant，以及代码块，在代码块里声明的变量只能在代码块里获得，在同一个代码块或全局下重复声明会报错。")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e._v("{\n  "),n("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" msg = "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'message'")]),e._v(";\n  "),n("span",{pre:!0,attrs:{class:"hljs-function"}},[n("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v(" "),n("span",{pre:!0,attrs:{class:"hljs-title"}},[e._v("say")]),e._v("("),n("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(")")]),e._v("{"),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("console")]),e._v(".log("),n("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'Hi'")]),e._v(");}\n}\n"),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("console")]),e._v(".log(msg); "),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// msg is not defined")]),e._v("\nsay(); "),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// it executes!!")]),e._v("\n")])]),n("p",[e._v("对于if，for，while等，创建在{...}的变量只能在代码块里获取。")]),n("h2",[e._v("词法环境 Lexical environment")]),n("h3",[e._v("1. 变量")]),n("p",[e._v("在JS中，每次函数被调用，代码块和里面的脚本会生成一个隐藏的内置的对象——词法环境"),n("strong",[e._v("Lexical Environment")]),e._v("。\n这个词法环境对象包含2部分：")]),n("ul",[n("li",[e._v("Environment Record —— 一个把所有"),n("em",[e._v("本地变量")]),e._v("储存为"),n("strong",[e._v("属性")]),e._v("的对象，该对象还包含其他信息如"),n("code",{pre:!0},[e._v("this")])]),n("li",[e._v("指向"),n("strong",[e._v("定义时")]),e._v("外部的词法环境outer lexical environment")])]),n("blockquote",[n("p",[e._v("一个变量只是Environment Record这个特殊内部对象的属性，“获取或改变一个变量”意味着“获取或改变该对象的属性”")])]),n("p",[e._v("在全局中，外部的词法环境为"),n("code",{pre:!0},[e._v("null")]),e._v("。\n词法环境对象变化过程：")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[n("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// execution starts [phrase: <uninitialised>] (outer -> null)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" phrase; "),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// [phrase:undefined]")]),e._v("\nphrase = "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'hello'")]),e._v("; "),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// [phrase:'hello']")]),e._v("\nphrase = "),n("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'bye'")]),e._v("; "),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[phrase:'bye']")]),e._v("\n")])]),n("ol",[n("li",[e._v("当脚本开始，词法环境对象会预先记录下所有声明的变量，最开始时，他们属于“未初始化”阶段。这是一个特殊的内部状态，引擎知道这些变量的存在但不让他们在"),n("code",{pre:!0},[e._v("let")]),e._v("声明前被使用。")]),n("li",[e._v("当变量phrase的声明出现，但未赋值时，值为"),n("code",{pre:!0},[e._v("undefined")]),e._v("。")]),n("li",[e._v("phrase被赋值")]),n("li",[e._v("phrase的值被改变")])]),n("h3",[e._v("2. 函数声明")]),n("p",[e._v("当一个词法环境创建后，函数声明是立即完成"),n("em",[e._v("初始化")]),e._v("，注意函数表达式并不能立即完成初始化。若函数声明在一个代码块内，若不是"),n("code",{pre:!0},[e._v("use strict")]),e._v("模式，代码块外也能获取该函数。")]),n("h3",[e._v("3. 内部和外部词法环境")]),n("p",[e._v("当一个函数被调用时，一个新的词法环境会自动被创建用于储存调用的本地变量和参数。当需要获取一个变量时，内部的词法环境会先被查找是否含有需要的变量，若找不到，则到其指向的外部环境中找，以此类推。")]),n("h3",[e._v("4. 返回一个函数")]),n("p",[e._v("所有的函数能记住他们被创建时的词法环境。所有函数都有隐藏的属性"),n("code",{pre:!0},[e._v("[[environment]]")]),e._v("，这保留这创建时对外部词法环境的指向。"),n("code",{pre:!0},[e._v("[[environment]]")]),e._v("只需在函数创建时设置一次。因此当函数被调用时，他能获取到外部词法环境的变量，也能"),n("em",[e._v("改变")]),e._v("外部变量的值，这就是"),n("em",[e._v("闭包")]),e._v("。")]),n("h2",[e._v("垃圾回收")]),n("p",[e._v("在一般情况下，当函数调用完毕，词法环境及其内部的变量会被回收，但若该函数的内部函数(nested function)仍然能被获取，这个函数的词法环境就不会被回收，因为他正在被引用。")]),n("h2",[n("code",{pre:!0},[e._v("new Function")])]),n("p",[e._v("Syntax:\n"),n("code",{pre:!0},[e._v('new Function([arg[0],arg[1],...arg[n]],"function body")')]),e._v("\ne.g. "),n("code",{pre:!0},[e._v("new Function('a','b','c','return a+b+c')")]),e._v("\n除了函数表达式和声明式创建函数，"),n("code",{pre:!0},[e._v("new Function")]),e._v("是另一种较为少见，但有时不得不用的声明函数的方式。表达式和声明式要求函数在JS执行前就写好，但"),n("code",{pre:!0},[e._v("new Function")]),e._v("可以让函数体在JS执行的时候才以"),n("em",[e._v("字符串")]),e._v("的形式传进去。同时这个函数的词法环境并不指向函数创建时的外部环境，而是指向全局。")])])}],v=n("2877"),_={},a=Object(v["a"])(_,t,r,!1,null,null,null);s["default"]=a.exports}}]);
//# sourceMappingURL=chunk-2d0e9955.9773a325.js.map