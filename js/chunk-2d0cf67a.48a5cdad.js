(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0cf67a"],{6428:function(s,r,a){"use strict";a.r(r);var t=function(){var s=this,r=s.$createElement;s._self._c;return s._m(0)},n=[function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("section",[a("p",[s._v("举一个二叉树的栗子：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":""}},[s._v("                20\n          /           \\\n        10            23\n      /   \\          /  \\\n     8    15       21    76\n      \\    / \\       \\   / \n      9  14  17     22  42\n             /         /  \\\n            16        33  56\n")])]),a("p",[s._v("写成JS的对象即为：")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("root = {\n  "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'left'")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'left'")]),s._v(": {\n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'right'")]),s._v(": {\n        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("9")]),s._v("\n      },\n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("8")]),s._v("\n    },\n    "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'right'")]),s._v(": {\n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'left'")]),s._v(": {\n        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("14")]),s._v("\n      },\n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'right'")]),s._v(": {\n        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'left'")]),s._v(": {\n          "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("16")]),s._v("\n        }, \n        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("17")]),s._v("\n      }, \n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("15")]),s._v("\n    }, \n    "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v("\n  },\n  "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'right'")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'left'")]),s._v(": {\n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'right'")]),s._v(": {\n        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("22")]),s._v("\n      },\n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("21")]),s._v("\n    },\n    "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'right'")]),s._v(": {\n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'left'")]),s._v(": {\n        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'left'")]),s._v(": {\n          "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("33")]),s._v("\n        },\n        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'right'")]),s._v(": {\n          "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("56")]),s._v("\n        },\n        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v("\n      },\n      "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("76")]),s._v("\n    }, \n    "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("23")]),s._v("\n  }, \n  "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'val'")]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("20")]),s._v("\n}\n")])]),a("p",[s._v("二叉树的遍历用"),a("em",[s._v("递归")]),s._v("实现的代码简单易懂，但递归性能消耗大；"),a("em",[s._v("非递归")]),s._v("实现中，运用到"),a("strong",[s._v("栈")]),s._v("的概念")]),a("h2",[s._v("二叉树的前序遍历")]),a("p",[s._v("所谓前序遍历(pre-order traversal)，即"),a("em",[s._v("从该节点开始，遍历左子节点，再到右子节点")])]),a("h3",[s._v("递归实现")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" preorderTraversal = "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("root, array = []")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (root) {\n    array.push(root.val);\n    preorderTraversal(root.left, array);\n    preorderTraversal(root.right, array);\n  }\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" array;\n};\n")])]),a("h3",[s._v("非递归实现")]),a("ol",[a("li",[s._v("遇到节点即访问当前节点，把当前节点的值push到最后结果的数组中；")]),a("li",[s._v("再把所有左子树入栈，直至左子树为空；")]),a("li",[s._v("此时当前节点为"),a("code",{pre:!0},[s._v("undefined")]),s._v("/"),a("code",{pre:!0},[s._v("null")]),s._v("的左子树a，当前栈中最后一个元素是当前"),a("code",{pre:!0},[s._v("undefined")]),s._v("的左子树的父节点b。出栈后，令当前节点为父节点b(可能有，也可能没有右子树)，此时栈中最后一个元素该"),a("strong",[s._v("父节点的父节点")]),s._v("d；")]),a("li",[s._v("此时已遍历父节点b的左子树和自身，应该到b的右子树c；")]),a("li",[s._v("此时右子树c为目标节点，重复"),a("code",{pre:!0},[s._v("1, 2, 3, 4")])])]),a("p",[s._v("Note: 需要在访问完左子树后，在访问右子树"),a("strong",[s._v("前")]),s._v("，把即将访问的右子树的所在节点"),a("strong",[s._v("出栈")]),s._v("，否则将陷入无限循环访问右子树")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" preorderTraversal = "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("root")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" result = [];\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" stack = [];\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" current = root;\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (current || stack.length > "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (current) {\n      result.push(current.val);\n      stack.push(current);\n      current = current.left;\n    }\n    current = stack.pop();\n    current = current.right;\n  }\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n};\n")])]),a("h2",[s._v("二叉树的中序遍历")]),a("p",[s._v("中序遍历(in-order traversal)，指"),a("em",[s._v("先遍历左子节点，再到自身(中间)，再到右子节点")])]),a("h3",[s._v("递归实现")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" inorderTraversal = "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("root, array = []")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (root) {\n    inorderTraversal(root.left, array);\n    array.push(root.val);\n    inorderTraversal(root.right, array);\n  }\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" array;\n};\n")])]),a("h3",[s._v("非递归实现")]),a("ol",[a("li",[s._v("左子树入栈，直至左子树为空；")]),a("li",[s._v("此时当前节点为"),a("code",{pre:!0},[s._v("undefined")]),s._v("/"),a("code",{pre:!0},[s._v("null")]),s._v("的左子树a，当前栈中最后一个元素是当前"),a("code",{pre:!0},[s._v("undefined")]),s._v("的左子树的父节点b。出栈后，令当前节点为父节点b(可能有，也可能没有右子树)，此时栈中最后一个元素该"),a("strong",[s._v("父节点的父节点")]),s._v("d；")]),a("li",[s._v("当确定没有左子树后，访问该节点b，把节点的值添加进最后结果的数组中；")]),a("li",[s._v("此时已遍历父节点b的左子树和自身，应该到b的右子树c；")]),a("li",[s._v("此时右子树c为目标节点，重复"),a("code",{pre:!0},[s._v("1, 2, 3, 4")])])]),a("p",[s._v("Note: 需要在访问完左子树后，在访问右子树"),a("strong",[s._v("前")]),s._v("，把即将访问的右子树的所在节点"),a("strong",[s._v("出栈")]),s._v("，否则将陷入无限循环访问右子树")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" inorderTraversal = "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("root")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" result = [];\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" stack = [];\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" current = root;\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (current || stack.length > "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (current) {\n      stack.push(current);\n      current = current.left;\n    }\n    current = stack.pop();\n    result.push(current.val);\n    current = current.right;\n  }\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n};\n")])]),a("h2",[s._v("二叉树的后序遍历")]),a("p",[s._v("所谓后序遍历(post-order traversal)，即"),a("em",[s._v("先遍历左子节点，再到右子节点，再到自身(中间)")])]),a("h3",[s._v("递归实现")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" postorderTraversal = "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("root, array = []")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (root) {\n    postorderTraversal(root.left, array);\n    postorderTraversal(root.right, array);\n    array.push(root.val);\n  }\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" array;\n};\n")])]),a("h3",[s._v("非递归实现")]),a("ol",[a("li",[s._v("左子树入栈，直至左子树为空；")]),a("li",[s._v("此时当前节点为"),a("code",{pre:!0},[s._v("undefined")]),s._v("/"),a("code",{pre:!0},[s._v("null")]),s._v("的左子树a，当前栈中最后一个元素是当前"),a("code",{pre:!0},[s._v("undefined")]),s._v("的左子树的父节点b，此时暂不出栈，但通过"),a("code",{pre:!0},[s._v("stack[stack.length - 1]")]),s._v("获取与"),a("code",{pre:!0},[s._v("stack.pop()")]),s._v("相同的元素，即栈的"),a("em",[s._v("最后一个")]),s._v("元素；")]),a("li",[s._v("目前为止，虽然访问了左子树，但未将左子树的值放入结果数组中；此时，访问右子树，在确定"),a("strong",[s._v("没有")]),s._v("右子树或右子树"),a("strong",[s._v("已经访问过")]),s._v("后，才把父节点b出栈，同时访问b，把b的值push到结果数组中，并"),a("strong",[s._v("标记")]),s._v("b已经访问过；")]),a("li",[s._v("因为b已经"),a("em",[s._v("被访问过")]),s._v("，而此时的栈最后一个元素是b的父节点，此时需要访问b的父节点的"),a("em",[s._v("右子节点")]),s._v("。b作为其父节点的"),a("em",[s._v("左子节点")]),s._v("，无需再访问，因此把"),a("code",{pre:!0},[s._v("current = null")]),s._v("，避免再进入"),a("code",{pre:!0},[s._v("while")]),s._v("循环；")]),a("li",[s._v("取栈中最后一个元素作为当前节点，判断其有否右子节点，若有，继续"),a("code",{pre:!0},[s._v("1, 2, 3, 4")]),s._v("，若无，继续出栈")])]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" postorderTraversal = "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("root")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" result = [];\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" stack = [];\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" last = "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 标记上一个访问的节点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" current = root;\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (current || stack.length > "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (current) {\n      stack.push(current);\n      current = current.left;\n    }\n    current = stack[stack.length - "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("];\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!current.right || current.right == last) {\n      current = stack.pop();\n      result.push(current.val);\n      last = current;\n      current = "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 继续弹栈")]),s._v("\n    } "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      current = current.right;\n    }\n  }\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n}\n")])])])}],e=a("2877"),v={},l=Object(e["a"])(v,t,n,!1,null,null,null);r["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0cf67a.48a5cdad.js.map