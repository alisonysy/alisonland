(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d225dc6"],{e5cc:function(e,_,v){"use strict";v.r(_);var s=function(){var e=this,_=e.$createElement;e._self._c;return e._m(0)},n=[function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("section",[v("h2",[e._v("HTTP 权限控制和身份校验")]),v("h3",[e._v("Basic authentication")]),v("p",[e._v("关于前端鉴权的多种方式，首先要提及的是"),v("strong",[e._v("HTTP Basic authentication")]),e._v("。HTTP提供了一个用于权限控制和认证的通用框架。")]),v("ol",[v("li",[e._v("服务器可以用来针对客户端的请求质询信息")]),v("li",[e._v("客户端用来提供身份验证凭证")])]),v("h4",[e._v("流程")]),v("p",[e._v("信息的交换必须通过*HTTPS(TLS)*连接来保证安全。")]),v("ol",[v("li",[e._v("客户端发送资源请求")]),v("li",[e._v("服务端返回401表示客户端未被授权，并在返回的字段首部"),v("code",{pre:!0},[e._v("WWW-Authenticate")]),e._v("提供如何验证的信息")]),v("li",[e._v("客户端在请求中添加"),v("code",{pre:!0},[e._v("Authentication")]),e._v("首部字段，值为身份凭证信息")])]),v("h3",[e._v("Token验证")]),v("h4",[e._v("Single Signed-On (SSO) 单点登录验证")]),v("p",[e._v("场景："),v("strong",[e._v("跨域认证")]),e._v(" － 应用有多个域名之间希望共享登录信息，用户在其中1个域名登录过一次后，在其他域名无需重复登录。使用传统的"),v("em",[e._v("session-cookie")]),e._v("无法解决，因为鉴于浏览器的同源政策，cookie只能在他被创建的域名下获取。\n而SSO通过在一个中间域名下进行身份验证，然后把验证信息与其他域名共享来达到目的。")]),v("p",[v("strong",[e._v("流程")])]),v("ol",[v("li",[e._v("当客户端求资源")]),v("li",[e._v("服务端检测到请求没有身份信息，重定向到进行身份验证的域名")]),v("li",[e._v("客户端进行身份验证成功，被重定向到原来请求资源的域名并接收到身份信息的token，这个token包含所有可以进行身份验证的信息")]),v("li",[e._v("当客户端新进入到需要身份验证的域名时，会带上之前下发的token，会被重定向到进行身份验证的域名，该域名检测到客户端的token，验证通过重定向到要求进入的新域名")])]),v("h4",[e._v("JWT (JSON Web Token)")]),v("p",[e._v("JWT是实现跨域认证的一种解决方案，可用于SSO单点登录。以往的用户登录信息都以session的形式保存在服务器上，而JWT则让客户端保存，每次请求都返回服务器。")]),v("p",[v("strong",[e._v("缺点")]),e._v("：")]),v("ul",[v("li",[e._v("由于服务器不保存session状态，导致无法在使用过程中废止某个已经签发的token")]),v("li",[e._v("JWT本身包含了认证信息，一旦泄露，任何人都可以获得该token的所有权限，应该设置较短的有效期，对于较为重要的权限应该再次认证")])]),v("p",[v("strong",[e._v("流程")])]),v("ol",[v("li",[e._v("服务器A认证了用户信息后，生成JSON对象，通过"),v("em",[e._v("Base64URL")]),e._v("转换和添加签名后得到JWT字符串，返回给客户端")]),v("li",[e._v("客户端登录跨域的关联服务，带上JWT信息(通常放在请求中)发送给服务器B")]),v("li",[e._v("服务器A和服务器B因为是关联的，共享用于签名的密钥，此时服务器B通过密钥解密JWT信息，认证用户身份\n"),v("em",[e._v("注")]),e._v("：Base64URL与Base64算法有不同，Base64URL会把"),v("code",{pre:!0},[e._v("=")]),e._v("省略，"),v("code",{pre:!0},[e._v("+")]),e._v("替换成"),v("code",{pre:!0},[e._v("-")]),e._v("，"),v("code",{pre:!0},[e._v("/")]),e._v("替换成"),v("code",{pre:!0},[e._v("_")])])]),v("p",[v("strong",[e._v("组成")]),v("code",{pre:!0},[e._v("header.payload.signature")]),v("em",[e._v("header")]),e._v("：是一个JSON对象，描述JWT的元数据")]),v("pre",{pre:!0},[v("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[e._v("{\n  "),v("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v('"alg"')]),e._v(":"),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"HS256"')]),e._v(", //签名的算法\n  "),v("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v('"typ"')]),e._v(":"),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"JWT"')]),e._v(" // token的类型\n}\n")])]),v("p",[v("em",[e._v("payload")]),e._v("：是一个JSON对象，存放用户身份信息，JWT规定了7个官方的字段，包括")]),v("ul",[v("li",[e._v("iss 签发人")]),v("li",[e._v("exp 过期时间")]),v("li",[e._v("sub 主题")]),v("li",[e._v("aud 受众")]),v("li",[e._v("nbf 生效时间")]),v("li",[e._v("iat 签发时间")]),v("li",[e._v("jti 编号")])]),v("p",[e._v("另外，还支持定义私有字段")]),v("p",[v("em",[e._v("signature")]),e._v("：对前两部分进行签名，防止数据篡改。使用"),v("em",[e._v("header")]),e._v("指定的算法，按照以下公式产生签名：")]),v("pre",{pre:!0},[v("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e._v("HMACSHA256( "),v("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//算法加密方法")]),e._v("\n  base64UrlEncode(header) + "),v("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'.'")]),e._v(" +\n  base64UrlEncode(payload),\n  secret\n)\n")])]),v("p",[e._v("然后把header，payload，signature三部分拼成一个字符串并用"),v("code",{pre:!0},[e._v(".")]),e._v("分隔再返回给用户")])])}],t=v("2877"),a={},r=Object(t["a"])(a,s,n,!1,null,null,null);_["default"]=r.exports}}]);
//# sourceMappingURL=chunk-2d225dc6.bfa29297.js.map